import Plugboard from "./plugboard";
import { buildTable, randomBigint } from "./util";

describe("util", () => {
  it("should create a random bigint", () => {
    const newBigInt = randomBigint();
    expect(newBigInt).toBeDefined();
    expect(newBigInt).toBeGreaterThan(0);
    expect(newBigInt).toBeLessThan(BigInt(Number.MAX_SAFE_INTEGER));
  });
  it("should build a table from a symbol array, skip, hex", () => {
    const symbolMap = Plugboard.defaultStraightThrough();
    const table = buildTable(symbolMap.symbols, true, true);
    expect(table).toBeDefined();
    expect(table).toEqual(
      [
        "   | 0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f",
        "---|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|",
        "00 |-- 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f",
        "10 |10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f",
        "20 |20 21 22 23 24 25 26 27 28 29 2a 2b 2c 2d 2e 2f",
        "30 |30 31 32 33 34 35 36 37 38 39 3a 3b 3c 3d 3e 3f",
        "40 |40 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f",
        "50 |50 51 52 53 54 55 56 57 58 59 5a 5b 5c 5d 5e 5f",
        "60 |60 61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f",
        "70 |70 71 72 73 74 75 76 77 78 79 7a 7b 7c 7d 7e 7f",
        "80 |80 81 82 83 84 85 86 87 88 89 8a 8b 8c 8d 8e 8f",
        "90 |90 91 92 93 94 95 96 97 98 99 9a 9b 9c 9d 9e 9f",
        "a0 |a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 aa ab ac ad ae af",
        "b0 |b0 b1 b2 b3 b4 b5 b6 b7 b8 b9 ba bb bc bd be bf",
        "c0 |c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 ca cb cc cd ce cf",
        "d0 |d0 d1 d2 d3 d4 d5 d6 d7 d8 d9 da db dc dd de df",
        "e0 |e0 e1 e2 e3 e4 e5 e6 e7 e8 e9 ea eb ec ed ee ef",
        "f0 |f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 fa fb fc fd fe ff",
        "---|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|",
        "   | 0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f",
      ].join("\n")
    );
  });
  it("should build a table from a symbol array, no skip, hex", () => {
    const symbolMap = Plugboard.defaultStraightThrough();
    const table = buildTable(symbolMap.symbols, false, true);
    expect(table).toBeDefined();
    expect(table).toEqual(
      [
        "   | 0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f",
        "---|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|",
        "00 |00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f",
        "10 |10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f",
        "20 |20 21 22 23 24 25 26 27 28 29 2a 2b 2c 2d 2e 2f",
        "30 |30 31 32 33 34 35 36 37 38 39 3a 3b 3c 3d 3e 3f",
        "40 |40 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f",
        "50 |50 51 52 53 54 55 56 57 58 59 5a 5b 5c 5d 5e 5f",
        "60 |60 61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f",
        "70 |70 71 72 73 74 75 76 77 78 79 7a 7b 7c 7d 7e 7f",
        "80 |80 81 82 83 84 85 86 87 88 89 8a 8b 8c 8d 8e 8f",
        "90 |90 91 92 93 94 95 96 97 98 99 9a 9b 9c 9d 9e 9f",
        "a0 |a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 aa ab ac ad ae af",
        "b0 |b0 b1 b2 b3 b4 b5 b6 b7 b8 b9 ba bb bc bd be bf",
        "c0 |c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 ca cb cc cd ce cf",
        "d0 |d0 d1 d2 d3 d4 d5 d6 d7 d8 d9 da db dc dd de df",
        "e0 |e0 e1 e2 e3 e4 e5 e6 e7 e8 e9 ea eb ec ed ee ef",
        "f0 |f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 fa fb fc fd fe ff",
        "---|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|",
        "   | 0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f",
      ].join("\n")
    );
  });
  it("should build a table from a symbol array, skip, no hex", () => {
    const symbolMap = Plugboard.defaultStraightThrough();
    const table = buildTable(symbolMap.symbols, true, false);
    expect(table).toBeDefined();
    expect(table).toEqual(
      [
        "   | 0   1   2   3   4   5   6   7   8   9   a   b   c   d   e   f ",
        "---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|",
        "00 |--- 001 002 003 004 005 006 007 008 009 010 011 012 013 014 015",
        "10 |016 017 018 019 020 021 022 023 024 025 026 027 028 029 030 031",
        "20 |032 033 034 035 036 037 038 039 040 041 042 043 044 045 046 047",
        "30 |048 049 050 051 052 053 054 055 056 057 058 059 060 061 062 063",
        "40 |064 065 066 067 068 069 070 071 072 073 074 075 076 077 078 079",
        "50 |080 081 082 083 084 085 086 087 088 089 090 091 092 093 094 095",
        "60 |096 097 098 099 100 101 102 103 104 105 106 107 108 109 110 111",
        "70 |112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127",
        "80 |128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143",
        "90 |144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159",
        "a0 |160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175",
        "b0 |176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191",
        "c0 |192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207",
        "d0 |208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223",
        "e0 |224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239",
        "f0 |240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255",
        "---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|",
        "   | 0   1   2   3   4   5   6   7   8   9   a   b   c   d   e   f ",
      ].join("\n")
    );
  });
  it("should build a table from a symbol array, no skip, no hex", () => {
    const symbolMap = Plugboard.defaultStraightThrough();
    const table = buildTable(symbolMap.symbols, false, false);
    expect(table).toBeDefined();
    expect(table).toEqual(
      [
        "   | 0   1   2   3   4   5   6   7   8   9   a   b   c   d   e   f ",
        "---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|",
        "00 |000 001 002 003 004 005 006 007 008 009 010 011 012 013 014 015",
        "10 |016 017 018 019 020 021 022 023 024 025 026 027 028 029 030 031",
        "20 |032 033 034 035 036 037 038 039 040 041 042 043 044 045 046 047",
        "30 |048 049 050 051 052 053 054 055 056 057 058 059 060 061 062 063",
        "40 |064 065 066 067 068 069 070 071 072 073 074 075 076 077 078 079",
        "50 |080 081 082 083 084 085 086 087 088 089 090 091 092 093 094 095",
        "60 |096 097 098 099 100 101 102 103 104 105 106 107 108 109 110 111",
        "70 |112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127",
        "80 |128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143",
        "90 |144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159",
        "a0 |160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175",
        "b0 |176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191",
        "c0 |192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207",
        "d0 |208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223",
        "e0 |224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239",
        "f0 |240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255",
        "---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|",
        "   | 0   1   2   3   4   5   6   7   8   9   a   b   c   d   e   f ",
      ].join("\n")
    );
  });
});
